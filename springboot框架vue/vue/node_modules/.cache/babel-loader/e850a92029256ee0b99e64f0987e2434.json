{"ast":null,"code":"// import axios from 'axios'\n// import router from \"@/router\";\n//\n// const request = axios.create({\n//     baseURL: \"/api\",\n//     timeout: 5000\n// })\n//\n// // 请求白名单，如果请求在白名单里面，将不会被拦截校验权限\n// const whiteUrls = [\"/user/login\", '/user/register']\n//\n// // request 拦截器\n// // 可以自请求发送前对请求做一些处理\n// // 比如统一加token，对请求参数统一加密\n// request.interceptors.request.use(config => {\n//     config.headers['Content-Type'] = 'application/json;charset=utf-8';\n//\n//     // 取出sessionStorage里面缓存的用户信息\n//     let userJson = sessionStorage.getItem(\"user\")\n//     if (!whiteUrls.includes(config.url)) {  // 校验请求白名单\n//         if(!userJson) {\n//             router.push(\"/login\")\n//         } else {\n//             let user = JSON.parse(userJson);\n//             config.headers['token'] = user.token;  // 设置请求头\n//         }\n//     }\n//     return config\n// }, error => {\n//     return Promise.reject(error)\n// });\n//\n// // response 拦截器\n// // 可以在接口响应后统一处理结果\n// request.interceptors.response.use(\n//     response => {\n//         let res = response.data;\n//         // 如果是返回的文件\n//         if (response.config.responseType === 'blob') {\n//             return res\n//         }\n//         // 兼容服务端返回的字符串数据\n//         if (typeof res === 'string') {\n//             res = res ? JSON.parse(res) : res\n//         }\n//         // 验证token\n//         if (res.code === '401') {\n//             console.error(\"token过期，重新登录\")\n//             router.push(\"/login\")\n//         }\n//         return res;\n//     },\n//     error => {\n//         console.log('err' + error) // for debug\n//         return Promise.reject(error)\n//     }\n// )\n//\n//\n// export default request","map":{"version":3,"names":[],"sources":["C:/Users/46128/Desktop/springboot框架vue/vue/src/utils/request.js"],"sourcesContent":["// import axios from 'axios'\n// import router from \"@/router\";\n//\n// const request = axios.create({\n//     baseURL: \"/api\",\n//     timeout: 5000\n// })\n//\n// // 请求白名单，如果请求在白名单里面，将不会被拦截校验权限\n// const whiteUrls = [\"/user/login\", '/user/register']\n//\n// // request 拦截器\n// // 可以自请求发送前对请求做一些处理\n// // 比如统一加token，对请求参数统一加密\n// request.interceptors.request.use(config => {\n//     config.headers['Content-Type'] = 'application/json;charset=utf-8';\n//\n//     // 取出sessionStorage里面缓存的用户信息\n//     let userJson = sessionStorage.getItem(\"user\")\n//     if (!whiteUrls.includes(config.url)) {  // 校验请求白名单\n//         if(!userJson) {\n//             router.push(\"/login\")\n//         } else {\n//             let user = JSON.parse(userJson);\n//             config.headers['token'] = user.token;  // 设置请求头\n//         }\n//     }\n//     return config\n// }, error => {\n//     return Promise.reject(error)\n// });\n//\n// // response 拦截器\n// // 可以在接口响应后统一处理结果\n// request.interceptors.response.use(\n//     response => {\n//         let res = response.data;\n//         // 如果是返回的文件\n//         if (response.config.responseType === 'blob') {\n//             return res\n//         }\n//         // 兼容服务端返回的字符串数据\n//         if (typeof res === 'string') {\n//             res = res ? JSON.parse(res) : res\n//         }\n//         // 验证token\n//         if (res.code === '401') {\n//             console.error(\"token过期，重新登录\")\n//             router.push(\"/login\")\n//         }\n//         return res;\n//     },\n//     error => {\n//         console.log('err' + error) // for debug\n//         return Promise.reject(error)\n//     }\n// )\n//\n//\n// export default request\n\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"script"}